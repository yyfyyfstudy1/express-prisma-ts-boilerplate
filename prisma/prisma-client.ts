import { PrismaClient } from '@prisma/client';
import winston from 'winston';
import path from 'path';

interface CustomNodeJsGlobal extends Global {
    prisma: PrismaClient;
}

declare const global: CustomNodeJsGlobal;

// ÂàõÂª∫‰∏ìÈó®Áî®‰∫éÊï∞ÊçÆÂ∫ìÊü•ËØ¢ÁöÑ logger
const dbLogger = winston.createLogger({
    transports: [
        // ÊéßÂà∂Âè∞ËæìÂá∫Ôºà‰ªÖÂºÄÂèëÁéØÂ¢ÉÔºâ
        new winston.transports.Console({
            level: process.env.NODE_ENV === 'production' ? 'error' : 'info',
            format: winston.format.combine(
                winston.format.colorize(),
                winston.format.timestamp({ format: 'HH:mm:ss' }),
                winston.format.printf(({ timestamp, level, message }) => {
                    return `${timestamp} ${level}: ${message}`;
                }),
            ),
        }),
        // Êñá‰ª∂ËæìÂá∫ÔºàÊâÄÊúâÁéØÂ¢ÉÔºâ
        new winston.transports.File({
            filename: path.join(process.cwd(), 'logs', 'database.log'),
            level: 'info',
            format: winston.format.combine(
                winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                winston.format.json(),
            ),
        }),
    ],
});

// ÈÖçÁΩÆ Prisma Êó•ÂøóÈÄâÈ°π
const prismaLogOptions = {
    log: [
        {
            emit: 'event' as const,
            level: 'query' as const,
        },
        {
            emit: 'event' as const,
            level: 'error' as const,
        },
        {
            emit: 'event' as const,
            level: 'warn' as const,
        },
        {
            emit: 'stdout' as const,
            level: 'info' as const,
        },
    ],
};

// ÂàõÂª∫ Prisma Client ÂÆû‰æã
const prisma = global.prisma || new PrismaClient(prismaLogOptions);

// ÁõëÂê¨ SQL Êü•ËØ¢Êó•Âøó
prisma.$on('query' as any, (e: any) => {
    const duration = e.duration;
    const query = e.query.replace(/\s+/g, ' ').trim();
    const params = e.params;
    
    // Ê†πÊçÆÊü•ËØ¢ËÄóÊó∂‰ΩøÁî®‰∏çÂêåÁöÑÊó•ÂøóÁ∫ßÂà´
    if (duration > 1000) {
        // Ë∂ÖËøá1ÁßíÁöÑÊÖ¢Êü•ËØ¢ - Ë≠¶Âëä
        dbLogger.warn(
            `üêå SLOW QUERY (${duration}ms) | SQL: ${query} | Params: ${params}`
        );
    } else if (duration > 500) {
        // Ë∂ÖËøá500msÁöÑÊü•ËØ¢ - ÊèêÁ§∫
        dbLogger.info(
            `‚ö†Ô∏è  Query (${duration}ms) | SQL: ${query} | Params: ${params}`
        );
    } else {
        // Ê≠£Â∏∏Êü•ËØ¢
        dbLogger.info(
            `‚úÖ Query (${duration}ms) | SQL: ${query} | Params: ${params}`
        );
    }
});

// ÁõëÂê¨ÈîôËØØÊó•Âøó
prisma.$on('error' as any, (e: any) => {
    dbLogger.error(`‚ùå Prisma Error: ${JSON.stringify(e)}`);
});

// ÁõëÂê¨Ë≠¶ÂëäÊó•Âøó
prisma.$on('warn' as any, (e: any) => {
    dbLogger.warn(`‚ö†Ô∏è  Prisma Warning: ${e.message || JSON.stringify(e)}`);
});

if (process.env.NODE_ENV !== 'production') {
    global.prisma = prisma;
}

export default prisma;
