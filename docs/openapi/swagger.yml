openapi: 3.0.0
info:
  title: express-prisma-ts-boilerplate
  description: >-
    A starter project written in TypeScript for quickly building Express RESTful
    APIs using ORM, loggers, schema validator, authentication, unit test
    coverage, and much more.
  version: 1.0.1
  contact:
    name: Vincent Jean
    email: vincent.queimado@gmail.com
  license:
    name: ISC
    url: https://github.com/vincent-queimado
servers:
  - url: /api/
    description: Api Ver. 1
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Api Info
  - name: Api Logs
  - name: Client
  - name: Client > User
  - name: Client > User > Auth
  - name: Client > User > Auth > Register
  - name: Client > User > Auth > Login
  - name: Client > User > Auth > Forgot Password
  - name: Client > User > Me
  - name: Client > Prescription
  - name: Admin
  - name: Admin > Users Management
paths:
  /info:
    get:
      tags:
        - Api Info
      summary: Info
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /logs:
    get:
      tags:
        - Api Logs
      summary: Logs
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/register:
    post:
      tags:
        - Client > User > Auth > Register
      summary: Register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
                name: johndoe
                phone: (81) 99999-9999
                password: Johndoe@1234
      security:
        - noauthAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/register/confirmation:
    get:
      tags:
        - Client > User > Auth > Register
      summary: Register Confirmation
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: email
          in: query
          schema:
            type: string
          example: johndoe@sample.com
        - name: token
          in: query
          schema:
            type: string
          example: 0D0G9ts1mX3Rdd6JbT2tzuiZ
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/login:
    post:
      tags:
        - Client > User > Auth > Login
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
                password: Johndoe@1234
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/logout:
    get:
      tags:
        - Client > User > Auth > Login
      summary: Logout
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/forgotpassword/request:
    post:
      tags:
        - Client > User > Auth > Forgot Password
      summary: Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/forgotpassword/reset:
    post:
      tags:
        - Client > User > Auth > Forgot Password
      summary: Reset
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
                token: 0D0IB7oSsu4STEjsp5LjDtUj
                password: Johndoe@1234
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/user/me:
    get:
      tags:
        - Client > User > Me
      summary: Show Me
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Client > User > Me
      summary: Update Me
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: johndoe
                email: johndoe@sample.com
                password: Johndoe@1234
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Client > User > Me
      summary: Delete Me
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/prescription:
    get:
      tags:
        - Client > Prescription
      summary: Get All Prescriptions (Filter by Patient)
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: query
          schema:
            type: string
          description: Filter by patient ID
          example: ':patientId'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Client > Prescription
      summary: Create Prescription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                patientId: patient-uuid
                docterId: doctor-uuid
                content: 阿莫西林 500mg，一日三次，饭后服用
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/prescription/{id}:
    get:
      tags:
        - Client > Prescription
      summary: Get One Prescription
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Prescription ID
          example: prescription-uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Client > Prescription
      summary: Update Prescription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: 更新后的处方内容
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Prescription ID
          example: prescription-uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Client > Prescription
      summary: Delete Prescription
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Prescription ID
          example: prescription-uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/users:
    get:
      tags:
        - Admin > Users Management
      summary: All Users
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
